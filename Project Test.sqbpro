<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="stores.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3839"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="customers" custom_title="0" dock_id="1" table="4,9:maincustomers"/><dock_state state="000000ff00000000fd00000001000000020000033b00000224fc0100000001fb000000160064006f0063006b00420072006f007700730065003101000000000000033b0000015c00ffffff0000033b0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="104"/><column index="2" value="273"/><column index="3" value="124"/><column index="4" value="106"/><column index="5" value="148"/><column index="6" value="257"/><column index="7" value="195"/><column index="8" value="140"/><column index="9" value="109"/><column index="10" value="78"/><column index="11" value="101"/><column index="12" value="158"/><column index="13" value="68"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">SELECT 'Customers' AS table_name, 
       13 AS number_of_attribute,
       COUNT(*) AS number_of_row
  FROM Customers
 
UNION ALL

SELECT 'Products' AS table_name, 
       9 AS number_of_attribute,
       COUNT(*) AS number_of_row
  FROM Products

UNION ALL

SELECT 'ProductLines' AS table_name, 
       4 AS number_of_attribute,
       COUNT(*) AS number_of_row
  FROM ProductLines

UNION ALL

SELECT 'Orders' AS table_name, 
       7 AS number_of_attribute,
       COUNT(*) AS number_of_row
  FROM Orders

UNION ALL

SELECT 'OrderDetails' AS table_name, 
       5 AS number_of_attribute,
       COUNT(*) AS number_of_row
  FROM OrderDetails

UNION ALL

SELECT 'Payments' AS table_name, 
       4 AS number_of_attribute,
       COUNT(*) AS number_of_row
  FROM Payments

UNION ALL

SELECT 'Employees' AS table_name, 
       8 AS number_of_attribute,
       COUNT(*) AS number_of_row
  FROM Employees

UNION ALL

SELECT 'Offices' AS table_name, 
       9 AS number_of_attribute,
       COUNT(*) AS number_of_row
  FROM Offices;
 -------------
WITH low_stock_tb AS (
SELECT p.productCode,
	  ROUND((SUM(o.quantityOrdered) * 1.0 / p.quantityInStock), 2) AS low_stock
FROM products AS p
LEFT JOIN orderdetails AS o ON p.productCode = o.productCode
GROUP BY p.productCode
ORDER BY low_stock DESC
LIMIT 10
)
SELECT p.productName, p.productLine,
	  SUM(o.quantityOrdered * o.priceEach) AS prod_performance
FROM products AS p
LEFT JOIN orderdetails AS o ON p.productCode = o.productCode
WHERE p.productCode IN (SELECT productCode FROM low_stock_tb)
GROUP BY p.productCode
ORDER BY prod_performance DESC
LIMIT 10;

-----
WITH customer_profit_tb AS (
SELECT customerNumber,
		SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
FROM products p
LEFT JOIN (
	SELECT *
	FROM orderdetails od
	LEFT JOIN orders o ON od.orderNumber = o.orderNumber
	) order_tb ON p.productCode = order_tb.productCode
WHERE customerNumber IS NOT NULL	
GROUP BY customerNumber
) SELECT AVG(profit) AS ltv
FROM customer_profit_tb;

--------
SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
  FROM products p
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber;

--------
WITH 

payment_with_year_month_table AS (
SELECT *, 
       CAST(SUBSTR(paymentDate, 1,4) AS INTEGER)*100 + CAST(SUBSTR(paymentDate, 6,7) AS INTEGER) AS year_month
  FROM payments p
),

customers_by_month_table AS (
SELECT p1.year_month, COUNT(*) AS number_of_customers, SUM(p1.amount) AS total
  FROM payment_with_year_month_table p1
 GROUP BY p1.year_month
),

new_customers_by_month_table AS (
SELECT p1.year_month, 
       COUNT(DISTINCT customerNumber) AS number_of_new_customers,
       SUM(p1.amount) AS new_customer_total,
       (SELECT number_of_customers
          FROM customers_by_month_table c
        WHERE c.year_month = p1.year_month) AS number_of_customers,
       (SELECT total
          FROM customers_by_month_table c
         WHERE c.year_month = p1.year_month) AS total
  FROM payment_with_year_month_table p1
 WHERE p1.customerNumber NOT IN (SELECT customerNumber
                                   FROM payment_with_year_month_table p2
                                  WHERE p2.year_month &lt; p1.year_month)
 GROUP BY p1.year_month
)

SELECT year_month, 
       ROUND(number_of_new_customers*100/number_of_customers,1) AS number_of_new_customers_props,
       ROUND(new_customer_total*100/total,1) AS new_customers_total_props
  FROM new_customers_by_month_table;

</sql><current_tab id="0"/></tab_sql></sqlb_project>
